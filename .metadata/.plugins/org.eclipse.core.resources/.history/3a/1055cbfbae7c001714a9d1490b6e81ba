package ch1_Arrays_and_Strings;


//Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?

// Key word in this problem is characters. Don't need to worry about checking for upper and lower case relative to uniqueness (as in something like C and c is allowed) because upper and lower case have different ASCII values

//1) iterate through string
//2) grab individual char from string
//3)check every char in the string against the current char
//4) if nothing is the same as the char then reture true
//5) otherwise return false


public class Pb1_is_Unique {

	public static void main(String[] args) {
		String word1 = "Cat"; //true
		String word2 = "Caat";//false
		String word3 = "dog";//true
		String word4 = "dDog";//true
		String word5 = "dogg";//false
		String word6 = "DDog";//false
		
		
		System.out.println( isUnique( word1 ));
		System.out.println( isUnique( word2 ));
		System.out.println( isUnique( word3 ));
		System.out.println( isUnique( word4 ));
		System.out.println( isUnique( word5 ));
		System.out.println( isUnique( word6 ));

	}
	
	// my solution, this first the constraint of not being able to use additional data structures
	//the run time is O(n^2) this is because its utilizing two loops through the same array (even though we are only ever checking i- 1 elements the second time we loop through the array)
	
	public static boolean isUnique ( String word ){ //static so we dont have to make a new instance of a class everytime we call isUnique
		for (int i = 0 ; i < word.length() ; i++){
			char Char = word.charAt(i);
			for(int j = i+1; j < word.length(); j++){
				if(Char == word.charAt(j)){
					return false;
				}
			}
		}
		return true;
	}
	
	public static boolean isUniqueASCII(){
		return false;
	}

}
