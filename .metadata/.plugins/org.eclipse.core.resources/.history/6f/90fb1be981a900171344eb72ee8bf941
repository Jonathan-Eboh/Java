package ch1_Arrays_and_Strings;


//Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?

// Key word in this problem is characters. Don't need to worry about checking for upper and lower case relative to uniqueness (as in something like C and c is allowed) because upper and lower case have different ASCII values

//1) iterate through string
//2) grab individual char from string
//3) check every char in the string against the current char
//4) if nothing is the same as the char then return true
//5) otherwise return false


public class Pb1_is_Unique {

	public static void main(String[] args) {
		String word1 = "Cat"; //true
		String word2 = "Caat";//false
		String word3 = "dog";//true
		String word4 = "dDog";//true
		String word5 = "dogg";//false
		String word6 = "DDog";//false
		
		
		System.out.println( isUnique( word1 ));
		System.out.println( isUnique( word2 ));
		System.out.println( isUnique( word3 ));
		System.out.println( isUnique( word4 ));
		System.out.println( isUnique( word5 ));
		System.out.println( isUnique( word6 ));
		System.out.println("The ASCII version of the algorithm:");
		System.out.println( isUniqueASCII( word1 ));
		System.out.println( isUniqueASCII( word2 ));
		System.out.println( isUniqueASCII( word3 ));
		System.out.println( isUniqueASCII( word4 ));
		System.out.println( isUniqueASCII( word5 ));
		System.out.println( isUniqueASCII( word6 ));
		

	}
	
	// my solution, this fits the constraint of not being able to use additional data structures
	//the run time is O(n^2) this is because its utilizing two loops through the same array (even though we are only ever checking i- 1 elements the second time we loop through the array)
	//things I missed, the edgecase/ shortcut that checks to see if the string that was passed in has a length that exceeds the maximum number of unique character available
	
	public static boolean isUnique ( String word ){ //static so we dont have to make a new instance of a class every time we call isUnique
		for (int i = 0 ; i < word.length() ; i++){
			char Char = word.charAt(i);
			for(int j = i+1; j < word.length(); j++){ //i+1 because we dont need to compare a given letter to itself
				if(Char == word.charAt(j)){ //if the current character (the one we initially grab) is the same as the current character we are looking at in j then that means there is a duplicate and we need to return false.
					return false;
				}
			}
		}
		return true;
	}
	
	/*
	 * 
	 */
	
	public static boolean isUniqueASCII( String word){
		if (word.length() > 128 ) return false; //here we are using the 128 char ASCII table, could also use the 256 for the extended table as opposed to the printable one so if our string is longer than the amount of unique charecters then we automatically know it must have at least one duplicate
		boolean[] char_set = new boolean[128]; //instantiating a new  array of 128 boolean indices
		for(int i = 0; i < word.length(); i++){ //looping through the array
			int charVal = word.charAt(i);// utilizing a property of java called 'widening primitive conversion' to make charVal be set to the ASCII value of the character at the given index i 
			if (char_set[charVal]) { //if this is true then we have already found this char in the string....
				return false; // so we return false
			}
			char_set[charVal] = true; // this step is key, if its not in the array we set the boolean value at the index corresponding to THAT ASCII value to be true so that if we encounter that ASCII value again we know that we have seen it before
		}
		
		
		return true; //if all is well return true and the string is concluded to be unique
	}

}
