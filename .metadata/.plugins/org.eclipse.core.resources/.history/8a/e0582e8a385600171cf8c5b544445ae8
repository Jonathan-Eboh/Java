package ds.doublyLinkedList;

public class DoublyLinkedList {
	
//---------------------------------------------------------------------------------
	//class attributes
	private Node first;
	private Node last;
	
//---------------------------------------------------------------------------------
	//our constructor method
	public DoublyLinkedList(){
		this.first = null;
		this.last = null;
	}
//---------------------------------------------------------------------------------
	
	public boolean isEmpty(){
		return first == null;
	}
//---------------------------------------------------------------------------------
	
	public void insertFirst(int data){
		Node newNode = new Node();
		newNode.data = data;
		
		if(isEmpty()){
			last = newNode; //if empty, last will refer to the new Node being created----we are putting the node in and pushing it back by adding to the front
		}else{
			first.previous = newNode;//so first is pointing at the first node in the list. The attribute of previous that is attached to the first node in the list is pointing back to first
		}
		
		newNode.next = first;// the new node's next field will point to the old first
		this.first = newNode; //this is the final step in the insertion, now the reference of first for the linked list will point to the node we just passed in
	}
//---------------------------------------------------------------------------------

	public void insertLast(int data){
		Node newNode = new Node();
		newNode.data = data;
		
//		if(isEmpty()){
//			last = newNode;
//		}else{
//			last.previous = newNode; //
//		}
//		
//		newNode.previous = last;
//		this.last = newNode;
		
		if(isEmpty()){
			first = newNode;// we are putting the node in and keeping it in the front by adding new nodes to the back
		}else{
			last.next = newNode;//assigning old last to new node
			newNode.previous = last;// the old last will be the new nodes previous
		}
		
		last = newNode; //the linkedlist's field should point to the new node
	}
	
	//---------------------------------------------------------------------------------

	//assume non-empty list
	
	public Node deleteFirst(){
		Node temp = first;
		if(first.next == null){// there is only one item in the list
			last = null;
		}else{
			first.next.previous = null; //the list's first node will point to null
		}
		
		first = first.next; 
		return temp;
	}
	
}
