package ds.singlyLinkedList;

public class SinglyLinkedList {
	private Node first; //this is our head node we are just calling it first here but either way its a way for us to keep track of the first node in the LinkedList
	
	
	
	public SinglyLinkedList(){//Every class is java has a default constructor...so wee dont really need this
		
	}
	
	
	public boolean isEmpty(){//just checks to see if the list is empty
		return (first == null);
	}
	
	public void insertFirst(int data){//used to insert at the beginning of the list
		Node newNode = new Node();//just making our node
		newNode.data = data; //the data for the new node is the data that has been passed in when this method is envoked
		newNode.next = first; //the node passed in points at the old front of the list
		first = newNode;//and now the current front of the list points at the new node
		
	}
	
	public Node deleteFirst(){ //this just removes the first node in the list by leaving it for grabage collection
		
		Node temp = first; //grab first node store in reference temp for later..
		first = first.next;//set firsts pointer to whatever is after the current first thus ignoring what is currently first and leaving it for garbage collection
		return temp;//using the variable temp so that we can return the what is referencing which is the first node
		
	}
	
	public void displayList(){//this will just allow us to see the list itself
		System.out.println("List (first --> last)");
		Node current = first;//we need somthing to iterate throughout the loop
		while(current != null){ //also need a condition for the loop to fail eventually
			current.displayNode();//this is the core of what we are doing each loop
			current = current.next;//this is to make sure we can move on to the next node
		}
		System.out.println();//just for formatting
	}
}
